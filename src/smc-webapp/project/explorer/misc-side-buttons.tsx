/*
 *  This file is part of CoCalc: Copyright © 2020 Sagemath, Inc.
 *  License: AGPLv3 s.t. "Commons Clause" – see LICENSE.md for details
 */

import * as React from "react";
import { HiddenSM, Icon, Tip } from "../../r_misc";
import { ProjectActions } from "smc-webapp/project_store";
const { Button, ButtonGroup, ButtonToolbar } = require("react-bootstrap");

interface Props {
  kucalc?: string;
  show_hidden?: boolean;
  show_masked?: boolean;
  public_view?: boolean;
  show_new?: boolean;
  show_library?: boolean;
  available_features?: { library: boolean };
  actions: ProjectActions;
}

export class MiscSideButtons extends React.Component<Props> {
  handle_refresh = (e: React.MouseEvent): void => {
    e.preventDefault();
    this.props.actions.fetch_directory_listing();
  };

  handle_hidden_toggle = (e: React.MouseEvent): void => {
    e.preventDefault();
    return this.props.actions.setState({
      show_hidden: !this.props.show_hidden,
    });
  };

  handle_masked_toggle = (e: React.MouseEvent): void => {
    e.preventDefault();
    this.props.actions.setState({
      show_masked: !this.props.show_masked,
    });
  };

  handle_backup = (e: React.MouseEvent): void => {
    e.preventDefault();
    this.props.actions.open_directory(".snapshots");
  };

  render_hidden_toggle(): JSX.Element {
    const icon = this.props.show_hidden ? "eye" : "eye-slash";
    return (
      <Button bsSize="small" onClick={this.handle_hidden_toggle}>
        <Tip title={"Show hidden files"} placement={"bottom"}>
          <Icon name={icon} />
        </Tip>
      </Button>
    );
  }

  render_masked_toggle(): JSX.Element {
    return (
      <Button
        bsSize="small"
        onClick={this.handle_masked_toggle}
        active={!this.props.show_masked}
      >
        <Tip title={"Hide autogenerated/temporary files"} placement={"bottom"}>
          <Icon name={"mask"} />
        </Tip>
      </Button>
    );
  }

  render_backup(): JSX.Element | undefined {
    if (this.props.public_view || !require("../../customize").commercial) {
      return;
    }
    // NOTE -- snapshots aren't available except in commercial version
    // -- they are complicated nontrivial thing that isn't usually setup...
    return (
      <Button bsSize="small" onClick={this.handle_backup}>
        <Icon name="life-saver" />{" "}
        <span style={{ fontSize: 12 }} className="hidden-sm">
          Backups
        </span>
      </Button>
    );
  }

  handle_library_click = (_e: React.MouseEvent): void => {
    this.props.actions.toggle_library();
  };

  render_library_button(): JSX.Element | undefined {
    // library only exists on kucalc, for now.
    if (this.props.kucalc !== "yes") {
      return;
    }
    return (
      <Button bsSize={"small"} onClick={this.handle_library_click}>
        <Icon name="book" /> <HiddenSM>Library</HiddenSM>
      </Button>
    );
  }

  render_upload_button(): JSX.Element {
    return (
      <Button
        bsSize="small"
        className="upload-button"
      >
        <Icon name="upload" /> <HiddenSM>Upload</HiddenSM>
      </Button>
    );
  }

  render(): JSX.Element {
    return (
      <ButtonToolbar
        style={{ whiteSpace: "nowrap", padding: "0" }}
        className="pull-right"
      >
        <ButtonGroup bsSize="small">
          {(
            this.props.available_features != null
              ? this.props.available_features.library
              : undefined
          )
            ? this.render_library_button()
            : undefined}
          {this.render_upload_button()}
        </ButtonGroup>
        <ButtonGroup bsSize="small" className="pull-right">
          {this.render_hidden_toggle()}
          {this.render_masked_toggle()}
          {this.render_backup()}
        </ButtonGroup>
      </ButtonToolbar>
    );
  }
}
